package in.Btes.placementAutomation.controllers;
import in.Btes.placementAutomation.entities.User;
import in.Btes.placementAutomation.repositories.UserRepository;
import java.util.List;
import java.util.Optional;
import javax.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

@RestController
@CrossOrigin(origins = "http://localhost:4200") // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo(after Application path)
public class UserController {
   @Autowired // This means to get the bean called userRepository
          // Which is auto-generated by Spring, we will use it to handle the data
   private UserRepository userRepository;
   
  /* @GetMapping("/hello")
   @ResponseBody
   public String hello() {
	   return "Service is up";
   }*/
   @PostMapping(path="/add")                                     
   public String addUser( @RequestBody User user) {        
	   userRepository.save(user); 
	   return "saved";
   }

   @GetMapping(path="/all")
   public @ResponseBody Iterable<User> getAllUsers() {
     // This returns a JSON or XML with the users
     return userRepository.findAll();
    }
   @GetMapping(path="/login/{email}")
   public ResponseEntity<Optional<User>> getUserByEmail(@RequestParam String email)
   {
 	 Optional<User> user=userRepository.findByEmail(email);
 	  
 	  return ResponseEntity.ok().body(user);
   }

        @DeleteMapping(path="/user/{id}")
        public String deleteuser(@RequestParam Long id) {
        	userRepository.deleteById(id);
        	    return "deleted";
        }

}



